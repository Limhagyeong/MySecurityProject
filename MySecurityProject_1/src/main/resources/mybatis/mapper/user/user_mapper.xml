<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <mapper namespace="com.hg.web.mapper.UserMapper">
 
 	<!-- 중복 가입 방지 -->
	<select id="countID" resultType="int" parameterType="String">
		SELECT COUNT(*) FROM myjoin WHERE username=#{username}
	</select>

 	<!-- 회원 가입 -->
 	<insert id="Joinprocess" parameterType="UserDTO">
 		INSERT INTO myjoin(username,password,name,gender,bday,phone,email,role)
 		VALUES(#{username},#{password},#{name},#{gender},#{bday},#{phone},#{email},#{role})
 	</insert>
 	
 	<!-- 입력한 ID를 시큐리티에서 받아 로그인 검증 -->
 	<select id="IDCheck" resultType="UserDTO" parameterType="String">
 		SELECT * FROM myjoin WHERE username=#{username}
 	</select>
 	
 	<!-- 회원 찾기 (아이디, 비밀번호 찾기에 활용) -->
 	<select id="findUser" resultType="UserDTO" parameterType="UserDTO">
 		SELECT * FROM myjoin WHERE name=#{name} AND email=#{email}
 	</select>
 	
 	<!-- 암호화된 임시 비밀번호로 업데이트 -->
 	<update id="updateTempPwd" parameterType="String">
 		UPDATE myjoin SET password=#{password} WHERE email=#{email}
 	</update> 
 	
 	<!-- 이메일 중복 여부 확인 -->
 	<select id="findEmail" resultType="UserDTO" parameterType="String">
 		SELECT * FROM myjoin WHERE email=#{email}
 	</select>
 	
 	<!-- 이메일 인증 이력 저장 -->
 	<insert id="mailAuthCode" parameterType="MailAuthDTO">
 		INSERT INTO mailauthcode(code, email,expiration,isauth) VALUES(#{code},#{email},#{expiration},isauth)
 	</insert>
 	
 	<!-- 인증 코드 검증 => 가장 최신의 인증 코드에 대해 검증 -->
 	<select id="mailAuthValidation" resultType="MailAuthDTO" parameterType="MailAuthDTO">
 		SELECT * FROM mailauthcode WHERE email=#{email} ORDER BY mailauthcode_num DESC LIMIT 1;
 	</select>
 	
 	<!-- 인증되었다면 isauth를 Y로 업데이트 -->
 	<update id="mailAuthOK" parameterType="MailAuthDTO">
 		UPDATE mailauthcode SET isauth='Y' WHERE email=#{email} AND code=#{code}
 	</update>
 	

 </mapper>